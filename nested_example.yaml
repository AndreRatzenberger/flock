name: test_flock
model: openai/gpt-4o
enable_temporal: false
agents:
  company_agent:
    name: company_agent
    model: openai/gpt-4o
    input: 'query: str'
    output: 'result: Company'
    use_cache: true
    evaluator:
      name: default
      config:
        model: openai/gpt-4o
        use_cache: true
        temperature: 0.0
        max_tokens: 4096
      type: DeclarativeEvaluator
    modules:
      output:
        name: output
        config:
          enabled: true
          theme: abernathy
          render_table: false
          max_length: 1000
          wait_for_input: false
          write_to_file: false
          output_dir: output/
          truncate_long_values: true
          show_metadata: true
          format_code_blocks: true
          custom_formatters: {}
          no_output: false
          print_context: false
        type: OutputModule
      metrics:
        name: metrics
        config:
          enabled: true
          collect_timing: true
          collect_memory: true
          collect_token_usage: true
          collect_cpu: true
          storage_type: json
          metrics_dir: metrics/
          aggregation_interval: 1h
          retention_days: 30
          alert_on_high_latency: true
          latency_threshold_ms: 30000
        type: MetricsModule
types:
  Company:
    module_path: tests.test_nested_serialization
    type: pydantic.BaseModel
    schema:
      $defs:
        Address:
          description: Address model for nested serialization test.
          properties:
            street:
              title: Street
              type: string
            city:
              title: City
              type: string
            zip_code:
              title: Zip Code
              type: string
          required:
          - street
          - city
          - zip_code
          title: Address
          type: object
        Contact:
          description: Contact information for nested serialization test.
          properties:
            email:
              title: Email
              type: string
            phone:
              title: Phone
              type: string
            address:
              $ref: '#/$defs/Address'
          required:
          - email
          - phone
          - address
          title: Contact
          type: object
      description: Company model with nested types for serialization test.
      properties:
        name:
          title: Name
          type: string
        industry:
          title: Industry
          type: string
        headquarters:
          $ref: '#/$defs/Address'
        contacts:
          items:
            $ref: '#/$defs/Contact'
          title: Contacts
          type: array
        departments:
          additionalProperties:
            items:
              type: string
            type: array
          title: Departments
          type: object
      required:
      - name
      - industry
      - headquarters
      - contacts
      - departments
      type: object
    imports:
    - from tests.test_nested_serialization import Company
components:
  DeclarativeEvaluator:
    type: flock_component
    module_path: flock.evaluators.declarative.declarative_evaluator
    description: Evaluator that uses DSPy for generation.
  OutputModule:
    type: flock_component
    module_path: flock.modules.output.output_module
    description: Module that handles output formatting and display.
  MetricsModule:
    type: flock_component
    module_path: flock.modules.performance.metrics_module
    description: Module for collecting and analyzing agent performance metrics.
dependencies:
- pydantic>=2.0.0
- flock-framework>=1.0.0
