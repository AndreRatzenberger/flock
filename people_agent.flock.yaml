model: openai/gpt-4o
enable_temporal: false
agents:
  people_agent:
    name: people_agent
    model: openai/gpt-4o
    input: amount_of_people
    output: 'random_user_list: list[RandomPerson]'
    use_cache: true
    evaluator:
      name: default
      config:
        model: openai/gpt-4o
        use_cache: true
        temperature: 0.0
        max_tokens: 4096
      type: DeclarativeEvaluator
    modules:
      output:
        name: output
        config:
          enabled: true
          theme: abernathy
          render_table: false
          max_length: 1000
          wait_for_input: false
          write_to_file: false
          output_dir: output/
          truncate_long_values: true
          show_metadata: true
          format_code_blocks: true
          custom_formatters: {}
          no_output: false
          print_context: false
        type: OutputModule
      metrics:
        name: metrics
        config:
          enabled: true
          collect_timing: true
          collect_memory: true
          collect_token_usage: true
          collect_cpu: true
          storage_type: json
          metrics_dir: metrics/
          aggregation_interval: 1h
          retention_days: 30
          alert_on_high_latency: true
          latency_threshold_ms: 30000
        type: MetricsModule
types:
  RandomPerson:
    module_path: __main__
    type: pydantic.BaseModel
    schema:
      description: Data model for random person information.
      properties:
        name:
          title: Name
          type: string
        age:
          title: Age
          type: integer
        gender:
          enum:
          - female
          - male
          title: Gender
          type: string
        job:
          title: Job
          type: string
        favorite_movie:
          title: Favorite Movie
          type: string
        short_bio:
          title: Short Bio
          type: string
      required:
      - name
      - age
      - gender
      - job
      - favorite_movie
      - short_bio
      type: object
    imports:
    - from __main__ import RandomPerson
components:
  DeclarativeEvaluator:
    type: flock_component
    module_path: flock.evaluators.declarative.declarative_evaluator
    description: Evaluator that uses DSPy for generation.
  OutputModule:
    type: flock_component
    module_path: flock.modules.output.output_module
    description: Module that handles output formatting and display.
  MetricsModule:
    type: flock_component
    module_path: flock.modules.performance.metrics_module
    description: Module for collecting and analyzing agent performance metrics.
dependencies:
- pydantic>=2.0.0
- flock-framework>=1.0.0
